"C++ Primer 5th"

1.2 initialize

int v1 = 0, v2 = 0;

1.4.1

A block is a sequence of zero or more statements enclosed by curly braces.

1.5

a primary focus of the design of C++ is to make it possible to define class types
that behave as naturally as the built-in types.

2.2.1 List Initialization

int units_sold = 0; //assignment-like, copy initialization
int units_sold = {0}; //curly braces, list initialization
int units_sold{0};
int units_sold(0); //function-like, ctor, parentheses

long double ld = 3.1415926536;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;   // ok: but value will be truncated

2.2.3

Variable names normally are lowercase—index, not Index or INDEX.

Like Sales_item, classes we define usually begin with an uppercase letter.

Identifiers with multiple words should visually distinguish each other, for
example, student_loan or studentLoan, not studentloan.

2.3.2

Pointer value, it can point to the location just immediately past the end of an
object.

2.6.1

In-class initializers are restricted as to the form (§ 2.2.1, p. 43) we can use:
They must either be enclosed inside curly braces or follow an = sign.
We may not specify an in-class initializer inside parentheses.

3.2.1

string s1;            // default initialization; s1 is the empty string
string s2 = s1;       // s2 is a copy of  s1
string s3 = "hiya";   // s3 is a copy of the string literal
string s4(10, 'c');   // s4 is cccccccccc

string s5 = "hiya";  // copy initialization
string s6("hiya");   // direct initialization
string s7(10, 'c');  // direct initialization; s7 is cccccccccc

string s8 = string(10, 'c'); // copy initialization; s8 is cccccccccc
//string temp(10, 'c'); // temp is cccccccccc
//string s8 = temp;     // copy temp into s8

3.3.1

list initialize (§ 2.2.1, p. 43) a vector from a list of zero or more initial
element values enclosed in curly braces:

vector<string> articles = {"a", "an", "the"};

when we use the copy initialization form (i.e., when we use =) (§ 3.2.1, p. 84),
we can supply only a single initializer;

when we supply an in-class initializer (§ 2.6.1, p. 73), we must either use copy
initialization or use curly braces.

we can supply a list of element values only by using list initialization in
which the initializers are enclosed in curly braces. We cannot supply a list of
initializers using parentheses:

vector<string> v1{"a", "an", "the"};  // list initialization
vector<string> v2("a", "an", "the");  // error
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1

3.4.1

we used != rather than < .

only a few library types, vector and string, have the subscript operator.

all of the library containers have iterators that define the == and != operators.

Most of those iterators do not have the < operator.

By routinely using interiors and !=, we don’t have to worry about the precise
type of container we’re processing.

3.5.3

We can obtain an off-the-end pointer.. We can take the address of the
nonexistent element one pass the last element of an array.

We may not dereference or increment an off-the-end pointer.

4.1.3

There are four operators that do guarantee the order in which operands are
evaluated:    &&    ||    ?:    ,

4.5

The postfix operator must store the original value so that it can
return the unincremented value as its result. If we don’t need the
unincremented value, there’s no need for the extra work done by the
postfix operator.

for ints and pointers, the compiler can optimize away this extra work.

4.9

char *p = sizeof(*p), because sizeof does not evaluate its operand, it doesn’t
matter that p is an invalid (i.e., uninitialized) pointer

5.1

A compound statement, usually referred to as a block, is a (possibly empty)
sequence of statements and declarations surrounded by a pair of curly braces.

5.6.3

block - Sequence of zero or more statements enclosed in curly braces.
A block is a statement, so it can appear anywhere a statement is expected.

6.3.3

Using a Trailing Return Type
auto func(int i) -> int(*)[10];

7.5.3

Sales_data obj(); // ok: but defines a function, not an object
if (obj.isbn() == Primer_5th_ed.isbn()) // error: obj is a function

Sales_data obj; // ok: obj is a default-initialized object

9.1

The library containers almost certainly perform as well as (and
usually better than) even the most carefully crafted alternatives.

10.1

int ia[] = {27, 210, 12, 47, 109, 83};
int val = 83;
int *result = find(begin(ia), end(ia), val);

11.3.4

The fact that the subscript operator adds an element if it is not
already in the map allows us to write surprisingly succinct programs..

13.1.1

Copy initialization ordinarily uses the copy constructor.

13.5:

Calling move returns a result that causes construct to 
use the string move constructor.

13.6.1

int &&rr1 = 42;
int &&rr2 = std::move(rr1);

Calling move tells the compiler that we have an lvalue that we want to
treat as if it were an rvalue.

the call to move promises that we do not intend to use rr1 again except
to assign to it or to destroy it.

13.6.2:

The move versions take a StrVec&& and can be used only 
when the argument is a (nonconst) rvalue

13.6.2:

For example, assuming both hp and hp2 are HasPtr objects: 

hp = hp2; // hp2 is an lvalue; copy constructor used to copy hp2
hp = std::move(hp2); // move constructor moves hp2

In the first assignment, 
the right-hand operand is an lvalue, 
so the move constructor is not viable. 
The copy constructor will be used to initialize rhs. 
The copy constructor will allocate a new string and copy the string 
to which hp2 points.

In the second assignment, 
we invoke std::move to bind an rvalue reference to hp2. In this case, 
both the copy constructor and the move constructor are viable. 
However, because the argument is an rvalue reference, 
it is an exact match for the move constructor. 
The move constructor copies the pointer from hp2. 
It does not allocate any memory.

15.3

The conversion from derived to base applies only to pointer or reference types.
..copying,moving, or assigning a derivedtype
object to a base-type object copies, moves, or assigns only the members in the
base-class part of the object.

The key idea behind OOP is polymorphism.
Whenwe call a function defined in a base class through a reference or pointer to the
base class, we do not know the type of the object on which that member is executed.
The object can be a base-class object or an object of a derived class. If the function is
virtual, then the decision as to which function to run is delayed until run time. The
version of the virtual function that is run is the one defined by the type of the object
to which the reference is bound or to which the pointer points.

