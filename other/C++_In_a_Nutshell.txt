C++_In_a_Nutshell

2

A C++ source file contains a series of zero or more declarations. A declaration can
be a function, type, object (constant or variable), namespace, template, or a
related entity.

Some language constructs can look like a declaration or an expression. Such ambiguities
are always resolved in favor of declarations. A related rule is that a
declaration that is a type specifier followed by a name and empty parentheses is a
declaration of a function that takes no arguments, not a declaration of an object
with an empty initializer.
    T(a); // Variable named a of type T, not an invocation of the T(int) constructor
    T b( ); // Function named b of no arguments, not a variable named b of type T

    T c(T(x)); // Declaration of a function named c, with one argument of type T
                // .. with a redundant set of parentheses around the parameter name.

You can force the compiler to interpret the declaration as an object definition by enclosing
one or more arguments in parentheses:
    T c(  T x   );
    T d(  T(x)  );
    T e( (T(x)) );


