
// rust partition_point, quick sort, binary search,

fn main() {
    let mut haystack = vec![
        Foo{name: String::from("apple"), num: 1,},
        Foo{name: String::from("banana"), num: 2,}, //dup
        Foo{name: String::from("banana"), num: 2,}, //dup
        Foo{name: String::from("orange"), num: 3,},
    ];
    let needle =
        Foo{name: String::from("banana"), num: 2,}; // "aaabanana", "banana", "zzzbanana"

    haystack.sort();

    let lower = haystack.partition_point(|x| x < &needle);

    let upper = haystack.partition_point(|x| (x <= &needle));
    // let upper = haystack.partition_point(|x| (&needle >= x));
    // let upper = haystack.partition_point(|x| !(&needle < x));

    if lower == upper {
        println!("not found");
    }
    for i in lower..upper {
        println!("{}: {:?}, {:?}", line!(), i, haystack[i]);
    }
}

#[derive(Debug, Eq, Ord, PartialEq, PartialOrd)]
struct Foo {
    name: String,
    num: i32,
}

//---


// c++ partition_point, quick sort, binary search,
// equal_range, lower_bound, upper_bound,

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <tuple>

struct T {
    std::string name;
    int num;
    friend bool operator< (const T &a, const T &b) {
        return std::tie(a.name, a.num) < std::tie(b.name, b.num);
    }
    friend bool operator== (const T &a, const T &b) {
        return std::tie(a.name, a.num) == std::tie(b.name, b.num);
    }
};

int main() {
    std::vector<T> haystack = {
        {"apple", 1},
        {"banana", 2}, //dup
        {"banana", 2}, //dup
        {"orange", 3},
    };
    T needle{"banana", 2}; //"aaabanana", "banana", "zzzbanana"

    std::sort(haystack.begin(), haystack.end());

    {
        auto first = std::partition_point(begin(haystack), end(haystack), [&needle](const T &t) {
            return std::tie(t.name, t.num) < std::tie(needle.name, needle.num);
        });

        auto last = std::partition_point(begin(haystack), end(haystack), [&needle](const T &t) {
            return std::tie(t.name, t.num) <= std::tie(needle.name, needle.num);
            // return std::tie(needle.name, needle.num) >= std::tie(t.name, t.num);
            // return !(std::tie(needle.name, needle.num) < std::tie(t.name, t.num));
        });

        for (auto it = first; it != last; ++it) {
            std::cout << __LINE__ << ": " << "name: " << it->name << ", num: " << it->num << std::endl;
        }
    }


    {
        auto first = lower_bound(haystack.begin(), haystack.end(), needle);
        auto last = upper_bound(haystack.begin(), haystack.end(), needle);

        for (auto it = first; it != last; ++it) {
            std::cout << __LINE__ << ": " << "name: " << it->name << ", num: " << it->num << std::endl;
        }
    }


    {
        auto [first, last] = equal_range(haystack.begin(), haystack.end(), needle);

        for (auto it = first; it != last; ++it) {
            std::cout << __LINE__ << ": " << "name: " << it->name << ", num: " << it->num << std::endl;
        }
    }

    return 0;
}

