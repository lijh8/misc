
// c/c++ source file

source file:
declarations
type declaration
variable declaration //global
function declaration

function:
variable declaration //local
statements
expressions statement
control statement
assignment statement


---


// c/c++ initialization

//  =  for initialization (and assignment): basic types
//char, int, float, double, pointers, array element and structure
//assignment
int n = 123;

//  {}  for initialization: array, structure, c++ vector
int a1[10] = {0};
int a2[] = “hello”; //a2 with nul
struct point {int x,y} pt = {10, 20};
vector<string> articles = {"a", "an", "the"};

//  ()  for initialization: c++ class type
//library string without nul, string::c_str() with nul
string s1("hello");
string s2 = "hello";
string s3(10, 'c');
string s4 = string(10, 'c');

// if struct has more members than initializer,
// or array has more elements than initializers,
// the rest without initializers will be zero.
char arr1[10] = {'a','b','c'}; // 
char arr2[10] = "abc";
struct T{ int a; int b; int c; } t = {1}; // 


---


// string and array

/* const*/ char *ptr = "hello"; // pointer const string literal
// *ptr = 'H'; // error
// ptr[0] = 'H'; // error

char arr[] = "hello";
*ar = 'H'; //ok
arr[0] = 'H'; //ok


---


// integral promotion

#include <iostream>
#include <climits>

int main()
{
    unsigned char       a = UCHAR_MAX;
    unsigned short      b = USHRT_MAX;
    int                 c = INT_MAX;
    unsigned int        d = UINT_MAX;
    unsigned long       e = ULONG_MAX;
    unsigned long long  f = ULLONG_MAX;

    std::cout << UCHAR_MAX  << "\t: " << UCHAR_MAX + 1  << "\n";
    std::cout << USHRT_MAX  << "\t: " << USHRT_MAX + 1  << "\n";
    std::cout << INT_MAX    << "\t: " << INT_MAX + 1  << "\n"; // overflow
    std::cout << UINT_MAX   << "\t: " << UINT_MAX + 1  << "\n";
    std::cout << ULONG_MAX  << "\t: " << ULONG_MAX + 1  << "\n";
    std::cout << ULLONG_MAX << "\t: " << ULLONG_MAX + 1  << "\n";

    std::cout << '\n';

    std::cout << a  << "\t: " << a + 1  << "\n";
    std::cout << b  << "\t: " << b + 1  << "\n";
    std::cout << c  << "\t: " << c + 1  << "\n";
    std::cout << d  << "\t: " << d + 1  << "\n";
    std::cout << e  << "\t: " << e + 1  << "\n";
    std::cout << f  << "\t: " << f + 1  << "\n";

}


---


// https://en.cppreference.com/w/cpp/language/implicit_conversion

prvalues of small integral types (such as char) may be converted to
prvalues of larger integral types (such as int).

In particular, arithmetic operators do not accept types smaller
than int as arguments, and integral promotions are automatically applied
after lvalue-to-rvalue conversion, if applicable.


// K&R C 2nd:

2.7 Type Conversions:
Otherwise, convert char and short to int.

A.6.1 Integral Promotion:
A character, a short integer, ..is converted to int;


---


// temporary

#include <iostream>

int main() {
  // Temporary of an temporary
  const char *a = (std::string("abc")).c_str(); //error

  // https://en.cppreference.com/w/cpp/language/lifetime
  // lifetime of a temporary object may be extended by binding to
  // a const lvalue reference
  const std::string &b = std::string("abc");    //ok
  const char *c = b.c_str();                    //ok
  std::cout << c << "\n";

  //or, use an intermediate temporary variable
  std::string tmp = std::string("abc");
  const char *p = tmp.c_str();
}


---


struct T{};
(struct T){} = (struct T){};

https://en.cppreference.com/w/c/language/value_category :
compound literals, which look similar, are lvalues

https://en.cppreference.com/w/c/language/compound_literal :
The value category of a compound literal is lvalue (its address can be taken)

chatGPT:

In both C99 and C11, compound literals are assignable.

According to the C99 and C11 standards, section 6.5.16.1, "The result of
the compound literal is an lvalue." This means that the compound literal
can be assigned to a variable or used as the operand of an assignment
operator.

Here is an example of assigning a compound literal to a variable in C:

int *p = (int []){1, 2, 3};


In this example, the compound literal (int []){1, 2, 3} creates an array
of integers with the values 1, 2, and 3. The array is then assigned to
the pointer variable p.

Therefore, the answer to your question is yes, compound literals in C
are assignable.

If you have any further questions, feel free to ask.


---


// struct literal, temporary,

struct T{};
(struct T){} = (struct T){};

https://en.cppreference.com/w/c/language/value_category :
compound literals, which look similar, are lvalues

https://en.cppreference.com/w/c/language/compound_literal :
The value category of a compound literal is lvalue (its address can be taken)


---

//https://en.cppreference.com/w/cpp/language/expressions#Literals
//Literals are the tokens of a C++ program that represent constant values
//embedded in the source code.

//C: temporary struct is struct literal. it is constant.
//C: can not change member data of temporary.
//C++: temporary is object constructed by constructor.
//C++: can not change member data of temporary.
//C++: can not invoke builtin operator & on temporary.
//C++: member functions and operators can be invoked on temporary objects.

typedef struct T {
    int num;
} T;

T f1()
{
    return (T){.num = 123,};
}

//lvalue reference requires const if argument is temporary
void f2_accept_temp(const T &t)
{
}

//rvalue reference
void f3(T &&t)
{
}

int main()
{
    //c: return value is struct literal
    //f1() = f1(); //error: expression is not assignable
    //f1().num++; //error: expression is not assignable
    //T *p = &f1(); //error: cannot take the address of an rvalue of type 'T' (aka 'struct T')

    //c++: return value is class/struct object
    f1() = f1(); //ok, invoke member operator= of the class
    //f1().num++; //error: expression is not assignable
    //T *p = &f1(); //error: taking the address of a temporary object of type 'T' [-Waddress-of-temporary]

    int n = f1().num;
    T t = f1();

    f2_accept_temp((T){});
    f3((T){});

    return 0;
}


---


https://en.cppreference.com/w/c/language/lifetime

Temporary lifetime
Struct and union objects with array members (either direct or members of
nested struct/union members) that are designated by non-lvalue expressions,
have temporary lifetime. Temporary lifetime begins when the expression
that refers to such object is evaluated and ends at
the next sequence point (until C11)
when the containing full expression or full declarator ends (since C11).

Any attempt to modify an object with temporary lifetime results in undefined behavior.

struct T { double a[4]; };
struct T f(void) { return (struct T){3.15}; }
double g1(double* x) { return *x; }
void g2(double* x) { *x = 1.0; }

int main(void)
{
    double d = g1(f().a); // C99: UB access to a[0] in g1 whose lifetime ended
                          //      at the sequence point at the start of g1
                          // C11: OK, d is 3.15
    g2(f().a); // C99: UB modification of a[0] whose lifetime ended at the sequence point
               // C11: UB attempt to modify a temporary object
}


---


// Sequence point occurs:

$ 7.12.1, C A reference manual, 5th
- at the end of a full expression--that is,
    an initializer, an expression statement, the expression in a return
    statement, and the control expressions in a conditional, iterative,
    or switch statement (including each expression in a for statement)
- after the first operand of a &&, ||, ?:, or comma operator
- after the evaluation of the arguments and function expression in a
    function call


---


// https://c-faq.com/expr/seqpoints.html

Between the previous and next sequence point an object shall have its
stored value modified at most once by the evaluation of an expression.
Furthermore, the prior value shall be accessed only to determine the
value to be stored.

- full expression or expression statement has sequence point at its end,
  subexpresion has sequence point only there is  &&  ||  :?  ,  in it.

- a variable can be modified only once within one single sequence point.

- expressions like i = i + 1 which use and modify i but only modify it later 
when it's reasonably easy to ensure that the final store of the final value 
(into i, in this case) doesn't interfere with the earlier accesses.


  i = i++ ;    // error
  i++ * i++ ;  // error
  i = i + 1;   // ok
  i = i+1 ;    // ok
  i++ && i++ ; // ok


---
