
// c/c++ source file

source file:
declarations
type declaration
variable declaration //global
function declaration

function:
variable declaration //local
statements
expressions statement
control statement
assignment statement


---


// c/c++ initialization

//  =  for initialization (and assignment): basic types
//char, int, float, double, pointers, array element and structure
//assignment
int n = 123;

//  {}  for initialization: array, structure, c++ vector
int a1[10] = {0};
int a2[] = “hello”; //a2 with nul
struct point {int x,y} pt = {10, 20};
vector<string> articles = {"a", "an", "the"};

//  ()  for initialization: c++ class type
//library string without nul, string::c_str() with nul
string s1("hello");
string s2 = "hello";
string s3(10, 'c');
string s4 = string(10, 'c');

// if struct has more members than initializer,
// or array has more elements than initializers,
// the rest without initializers will be zero.
char arr1[10] = {'a','b','c'}; //
char arr2[10] = "abc";
struct T{ int a; int b; int c; } t = {1}; //


---


// string and array

/* const*/ char *ptr = "hello"; // pointer const string literal
// *ptr = 'H'; // error
// ptr[0] = 'H'; // error

char arr[] = "hello";
*ar = 'H'; //ok
arr[0] = 'H'; //ok


---


// integral promotion

#include <iostream>
#include <climits>

int main()
{
    unsigned char       a = UCHAR_MAX;
    unsigned short      b = USHRT_MAX;
    int                 c = INT_MAX;
    unsigned int        d = UINT_MAX;
    unsigned long       e = ULONG_MAX;
    unsigned long long  f = ULLONG_MAX;

    std::cout << UCHAR_MAX  << "\t: " << UCHAR_MAX + 1  << "\n";
    std::cout << USHRT_MAX  << "\t: " << USHRT_MAX + 1  << "\n";
    std::cout << INT_MAX    << "\t: " << INT_MAX + 1  << "\n"; // overflow
    std::cout << UINT_MAX   << "\t: " << UINT_MAX + 1  << "\n";
    std::cout << ULONG_MAX  << "\t: " << ULONG_MAX + 1  << "\n";
    std::cout << ULLONG_MAX << "\t: " << ULLONG_MAX + 1  << "\n";

    std::cout << '\n';

    std::cout << a  << "\t: " << a + 1  << "\n";
    std::cout << b  << "\t: " << b + 1  << "\n";
    std::cout << c  << "\t: " << c + 1  << "\n";
    std::cout << d  << "\t: " << d + 1  << "\n";
    std::cout << e  << "\t: " << e + 1  << "\n";
    std::cout << f  << "\t: " << f + 1  << "\n";

}


---


https://c-faq.com/expr/intoverflow1.html

int a = INT_MAX;
int b = INT_MAX;
long int c = a * b; // error
long int c = (long int)(a * b); // error, conversion, it happens too late

Under C's integral promotion rules, the multiplication is carried out
using int arithmetic, and the result may overflow or be truncated before
being promoted and assigned to the long int left-hand side.
Use an explicit cast on at least one of the operands to force long arithmetic:

    int a = INT_MAX;
    int b = INT_MAX; // or, long b = INT_MAX;
    long int c = (long int)a * b;
    long int d = ((long int)a) * b;
    long int e = (1L * a) * b;


---


https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/n4950.pdf ,

sec 6.8.2 :

Note 2 : Unsigned arithmetic does not overflow.
Overflow for signed arithmetic yields undefined behavior (7.1).

// or, underflow and overflow is well defined in unsigned integers

    auto x = UINT_MAX; // 4294967295
    auto x2 = 5 - UINT_MAX; // 6
    auto x3 = 5 - (long)UINT_MAX; // -4294967290

// leetcode 58. Length of Last Word
// https://leetcode.cn/problems/length-of-last-word/description/

    #include <iostream>
    #include <vector>
    #include <string>
    using namespace std;

    int lengthOfLastWord(string s) {
        auto a = s.find_last_not_of(' ');
        auto b = s.find_last_of(' ', a);
        return a - b;
    }

    int main() {
        std::cout << lengthOfLastWord("hello") << "\n"; // 5 - string::npos == 6 // ?
        // std::cout << lengthOfLastWord("hello guys") << "\n";
        // std::cout << lengthOfLastWord(" hello c++ ") << "\n";
        return 0;
    }


---


"                                                                   "
"  K&R C 2nd, A4.2:                                                 "
"  obey the laws of arithmetic modulo 2^n                           "
"  arithmetic on unsigned quantities can never overflow             "
"                                                                   "
"  unsigned integers                                                "
"                                                                   "
"          M  M                                                     "
"          A  I                                                     "
"          X, N,                                                    "
"             0,                                                    "
"          *  *   1,                                                "
"       *        *                                                  "
"      *          *                                                 "
"      *          *                                                 "
"       *        *                                                  "
"          *  *                                                     "
"                                                                   "
"  ---------------------------------------------------------------  "
"                                                                   "
"  K&R C 2nd, A6.2:                                                 "
"  When any integer is converted to a signed type,                  "
"  the value is unchanged if it can be represented in the new type  "
"  and is implementation-defined otherwise.                         "
"                                                                   "
"  signed int                                                       "
"                                                                   "
"  MIN, ..  -2,-1, 0, 1, 2, ..  MAX,                                "
"   *  *  *  *  *  *  *  *  *  *  *                                 "
"                                                                   "


---


chatGPT:
Unsigned integers in C and C++ indeed behave like a circle or a clock face.

When you increment an unsigned integer beyond its maximum value (UINT_MAX),
it wraps around to 0, which is the smallest value.
This is because unsigned arithmetic is performed modulo 2^n,
where n is the number of bits in the unsigned integer type.

Similarly, when you decrement an unsigned integer below 0,
it wraps around to UINT_MAX, which is the largest value.

This behavior is often referred to as "overflow" or "wraparound",
and it's a fundamental property of unsigned arithmetic in C and C++.

The diagram you provided illustrates this concept nicely,
with the unsigned integer values forming a circular sequence,
where incrementing beyond the maximum value brings you back to the minimum value,
and decrementing below the minimum value brings you back to the maximum value.

So, yes, you can think of unsigned integers as a circle or a clock face,
where the values wrap around seamlessly from maximum to minimum and vice versa.


---


chatGPT:
In C and C++, unsigned integers follow modular arithmetic rules,
which means they "wrap around" when they exceed the maximum value that
can be represented by the data type.

When you increment an unsigned integer beyond its maximum value (UINT_MAX),
it wraps around to 0. Similarly, when you decrement an unsigned integer below 0,
it wraps around to UINT_MAX. This behavior is akin to a clock face or a circle,
where the values loop back around when they reach the limits.

For example, in an 8-bit unsigned integer, the maximum value is 255 (2^8 - 1).
If you increment 255 by 1, it wraps around to 0. If you decrement 0 by 1,
it wraps around to 255.

This behavior is useful in scenarios where you want to ensure that
arithmetic operations on unsigned integers never result in undefined behavior
due to overflow.
Instead, the values "wrap around" in a predictable manner within the
range of the data type.


---


// c,c++, unsigned, wrap around, module, 模运算,

chatGPT:
在C和C++中, 对于无符号整数类型的运算, 整数溢出是定义行为.
因此, 表达式 `5 - UINT_MAX` 的结果是确定的.

由于 `UINT_MAX` 是无符号整数类型的最大值, 它的值是一个特定的常量,
例如在C中定义为 `4294967295`, 即 2^32-1 .
在这种情况下, 表达式 `5 - UINT_MAX` 将进行无符号整数的减法运算.

根据无符号整数的算术运算规则, 当减法运算结果小于零时, 会对无符号整数类型的范围进行循环.
具体来说, 当 `5 - UINT_MAX` 计算时, 结果将是一个正整数, 等于 `6` .

因此, 表达式 `5 - UINT_MAX` 的值是确定的, 并且在C和C++中是合法可移植的. 请注意,
这个结果是基于对无符号整数类型的特定规则进行推断的.
如果涉及到其他类型的操作数或混合类型的运算, 结果可能会有所不同.

chatGPT:
In C and C++, for operations involving unsigned integer types,
integer overflow is defined behavior.
Therefore, the result of the expression `5 - UINT_MAX` is well-defined.

Since `UINT_MAX` is the maximum value for an unsigned integer type,
it has a specific value, such as `4294967295` in C 2^32-1.
In this case, the expression `5 - UINT_MAX` will
undergo subtraction with unsigned integers.

According to the arithmetic rules for unsigned integers, when the result
of a subtraction operation is negative, it wraps around within the range
of the unsigned integer type. Specifically, when computing `5 - UINT_MAX`,
the result will be a positive integer, equal to `6`.

Therefore, the value of the expression `5 - UINT_MAX` is well-defined
and is legally portable in C and C++. It is important to note that this
result is based on specific rules for unsigned integer types.
Results may differ if other types of operands are involved or if
mixed-type operations are performed.


---


https://c-faq.com/misc/intovf.html

How can I ensure that integer arithmetic doesn't overflow?

The usual approach is to test the operands against the limits in the
header file <limits.h> before doing the operation. For example,
here is a ``careful'' addition function:

int
chkadd(int a, int b)
{
    if(INT_MAX - b < a) {
        fputs("int overflow\n", stderr);
        return INT_MAX;
    }
    return a + b;
}

Here is a complete set of three functions for ``careful''
addition, subtraction, and multiplication.
(Note: these functions are still not perfect, and may fail if invoked on
various edge cases, such as the smallest negative integer, INT_MIN.)

#include <stdio.h>
#include <limits.h>

int
chkadd(int a, int b)
{
    if(b < 0)
        return chksub(a, -b);
    if(INT_MAX - b < a) {
        fputs("int overflow\n", stderr);
        return INT_MAX;
    }
    return a + b;
}

int
chksub(int a, int b)
{
    if(b < 0)
        return chkadd(a, -b);
    if(INT_MIN + b > a) {
        fputs("int underflow\n", stderr);
        return INT_MIN;
    }
    return a - b;
}

int
chkmul(int a, int b)
{
    int sign = 1;
    if(a == 0 || b == 0) return 0;
    if(a < 0) { a = -a; sign = -sign; }
    if(b < 0) { b = -b; sign = -sign; }
    if(INT_MAX / b < a) {
        fputs("int overflow\n", stderr);
        return (sign > 0) ? INT_MAX : INT_MIN;
    }
    return sign * a * b;
}


---


// https://en.cppreference.com/w/cpp/language/implicit_conversion

prvalues of small integral types (such as char) may be converted to
prvalues of larger integral types (such as int).

In particular, arithmetic operators do not accept types smaller
than int as arguments, and integral promotions are automatically applied
after lvalue-to-rvalue conversion, if applicable.


// K&R C 2nd:

2.7 Type Conversions:
Otherwise, convert char and short to int.

A.6.1 Integral Promotion:
A character, a short integer, ..is converted to int;


---


// temporary

#include <iostream>

int main() {
    char c1 = toupper(std::string_view("abc")[0]);    //ok
    char c2 = toupper(std::string("abc").c_str()[0]); //ok

    // Temporary of an temporary
    const char *a = (std::string("abc")).c_str(); //error

    // https://en.cppreference.com/w/cpp/language/lifetime
    // lifetime of a temporary object may be extended by binding to
    // a const lvalue reference
    const std::string &b = std::string("abc");    //ok
    const char *c3 = b.c_str();                   //ok
    std::cout << c3 << "\n";

    //or, use an intermediate temporary variable
    std::string tmp = std::string("abc");
    const char *p = tmp.c_str();

}


---


// struct literal, temporary,

struct T{};
(struct T){} = (struct T){};

https://en.cppreference.com/w/c/language/value_category :
compound literals, which look similar, are lvalues

https://en.cppreference.com/w/c/language/compound_literal :
The value category of a compound literal is lvalue (its address can be taken)


---


chatGPT:

In both C99 and C11, compound literals are assignable.

According to the C99 and C11 standards, section 6.5.16.1, "The result of
the compound literal is an lvalue." This means that the compound literal
can be assigned to a variable or used as the operand of an assignment
operator.

Here is an example of assigning a compound literal to a variable in C:

int *p = (int []){1, 2, 3};


In this example, the compound literal (int []){1, 2, 3} creates an array
of integers with the values 1, 2, and 3. The array is then assigned to
the pointer variable p.

Therefore, the answer to your question is yes, compound literals in C
are assignable.

If you have any further questions, feel free to ask.


---


//https://en.cppreference.com/w/cpp/language/expressions#Literals
//Literals are the tokens of a C++ program that represent constant values
//embedded in the source code.

//C: temporary struct is struct literal. it is constant.
//C: can not change member data of temporary.
//C++: temporary is object constructed by constructor.
//C++: can not change member data of temporary.
//C++: can not invoke builtin operator & on temporary.
//C++: member functions and operators can be invoked on temporary objects.

typedef struct T {
    int num;
} T;

T f1()
{
    return (T){.num = 123,};
}

//lvalue reference requires const if argument is temporary
void f2_accept_temp(const T &t)
{
}

//rvalue reference
void f3(T &&t)
{
}

int main()
{
    //c: return value is struct literal
    //f1() = f1(); //error: expression is not assignable
    //f1().num++; //error: expression is not assignable
    //T *p = &f1(); //error: cannot take the address of an rvalue of type 'T' (aka 'struct T')

    //c++: return value is class/struct object
    f1() = f1(); //ok, invoke member operator= of the class
    //f1().num++; //error: expression is not assignable
    //T *p = &f1(); //error: taking the address of a temporary object of type 'T' [-Waddress-of-temporary]

    int n = f1().num;
    T t = f1();

    f2_accept_temp((T){});
    f3((T){});

    return 0;
}


---


https://en.cppreference.com/w/c/language/lifetime

Temporary lifetime
Struct and union objects with array members (either direct or members of
nested struct/union members) that are designated by non-lvalue expressions,
have temporary lifetime. Temporary lifetime begins when the expression
that refers to such object is evaluated and ends at
the next sequence point (until C11)
when the containing full expression or full declarator ends (since C11).

Any attempt to modify an object with temporary lifetime results in undefined behavior.

struct T { double a[4]; };
struct T f(void) { return (struct T){3.15}; }
double g1(double* x) { return *x; }
void g2(double* x) { *x = 1.0; }

int main(void)
{
    double d = g1(f().a); // C99: UB access to a[0] in g1 whose lifetime ended
                          //      at the sequence point at the start of g1
                          // C11: OK, d is 3.15
    g2(f().a); // C99: UB modification of a[0] whose lifetime ended at the sequence point
               // C11: UB attempt to modify a temporary object
}


---


// Sequence point occurs:

$ 7.12.1, C A reference manual, 5th
- at the end of a full expression--that is,
    an initializer, an expression statement, the expression in a return
    statement, and the control expressions in a conditional, iterative,
    or switch statement (including each expression in a for statement)
- after the first operand of a &&, ||, ?:, or comma operator
- after the evaluation of the arguments and function expression in a
    function call


---


// https://c-faq.com/expr/seqpoints.html

Between the previous and next sequence point an object shall have its
stored value modified at most once by the evaluation of an expression.
Furthermore, the prior value shall be accessed only to determine the
value to be stored.

- full expression or expression statement has sequence point at its end,
  subexpresion has sequence point only there is  &&  ||  :?  ,  in it.

- a variable can be modified only once within one single sequence point.

- expressions like i = i + 1 which use and modify i but only modify it later
when it's reasonably easy to ensure that the final store of the final value
(into i, in this case) doesn't interfere with the earlier accesses.


    i = i++;    // error
    i++ * i++;  // error
    i = i + 1;  // ok
    i = i + 1;  // ok
    i++ && i++; // ok


---


https://c-faq.com/expr/confused.html

If an object (as defined above) appears more than once in an expression,
and is the object modified in the expression, make sure that all
appearances of the object which fetch its value participate in the
computation of the new value which is stored.
This rule allows the expression

    i = i + 1

because although the object i appears twice and is modified,
the appearance (on the right-hand side) which fetches i's old value
is used to compute i's new value.


---


// 1. function argument pass by value
// will not change the argument passed by caller
void f1(int x){
    x++;
}

// 2. function argument pass by const reference
// (1) will not change the actual argument passed by caller
void f2(const int &x){
    // (2) can not change formal parameter declared as const too
    // x++; // error: assign to const

    auto y = x; // make a copy
    y++; // ok
}

// 3. function argument pass by reference
// will change the actual argument passed by caller
void f3(int &x){
    x++;
}

int main(){
    int num = 10;
    f1(num); // num is not changed
    f2(num); // num is not changed
    f3(num); // num is changed
    return 0;
}


---

